" Credits: Some parts lifted from yadr

let mapleader = " "

set nocompatible
filetype on
filetype off

set encoding=utf-8
set noerrorbells
set novisualbell

" Fast escape to normal mode
:imap <C-space> <Esc>

colorscheme desert

" =============== Vundle ===========================
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'
Bundle 'altercation/vim-colors-solarized'
if has('gui_running')
  set background=dark
  colorscheme solarized
endif

Bundle 'Lokaltog/vim-easymotion'

Bundle 'scrooloose/nerdtree'
if has('gui_running')
  autocmd vimenter * NERDTree
endif
nmap <Leader>n :NERDTreeToggle<CR>

Bundle 'fholgado/minibufexpl.vim'
let g:miniBufExplShowBufNumbers = 0           " no buffer numbers
if has('gui_running')
  let g:miniBufExplorerMoreThanOne = 0          " always show
  let g:miniBufExplSplitBelow = 1               " right side
  let g:miniBufExplVSplit = 24                  " show vertical
endif

Bundle 'tpope/vim-surround'

Bundle 'kien/ctrlp.vim'

Bundle 'ddollar/nerdcommenter'

Bundle 'chrisbra/NrrwRgn'

filetype plugin indent on     " required!

syntax enable

set number
set ruler
syntax on

" ================ History/Backup ===================

set history=700

set noswapfile
set nobackup
set nowb

" Keep undo history across sessions, by storing in file.
" Only works all the time.
if has('gui_running')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif

" Use Ctrl-s for saving
noremap <C-S> :update<CR>
vnoremap <C-S> <C-C>:update<CR>
inoremap <C-S> <C-O>:update<CR>

" ================ Indentation ======================

set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

filetype plugin on
filetype indent on

" Display tabs and trailing spaces visually
set list listchars=tab:\ \ ,trail:Â·

set nowrap       "Don't wrap lines
set linebreak    "Break lines at preset width

" ================ Searching ========================
set hlsearch
set incsearch
set ignorecase
set smartcase

" =============== Window management =================
" Create window splits easier. The default
" way is Ctrl-w,v and Ctrl-w,s. I remap
" this to vv and ss
nnoremap <silent> vv <C-w>v
nnoremap <silent> ss <C-w>s

" Move between split windows
nnoremap <silent> <C-h> <C-w>h
nnoremap <silent> <C-l> <C-w>l
nnoremap <silent> <C-k> <C-w>k
nnoremap <silent> <C-j> <C-w>j

" Use Q to intelligently close a window 
" (if there are multiple windows into the same buffer)
" or kill the buffer entirely if it's the last window looking into that buffer
function! CloseWindowOrKillBuffer()
  let number_of_windows_to_this_buffer = len(filter(range(1, winnr('$')), "winbufnr(v:val) == bufnr('%')"))

  " We should never bdelete a nerd tree
  if matchstr(expand("%"), 'NERD') == 'NERD'
    wincmd c
    return
  endif

  if number_of_windows_to_this_buffer > 1
    wincmd c
  else
    bdelete
  endif
endfunction

nnoremap <silent> Q :call CloseWindowOrKillBuffer()<CR>

" =============== Buffers ===========================
set hidden

map <up> :bp<CR>
map <down> :bn<CR>

" =============== Movement ==========================
" Set 7 lines buffer for scrolling
set so=7

" Intuitive home and end
map <S-h> ^
map <S-l> $

set nostartofline " preserve cursor column position

" ============== Text Editing =======================
" allow backspacing over everything
set backspace=indent,eol,start

nmap <C-Up> [e
nmap <D-k> [e
nmap <C-Down> ]e
nmap <D-j> ]e
vmap <C-Up> [egv
vmap <D-k> [egv
vmap <C-Down> ]egv
vmap <D-j> ]egv

" Quickly add new lines
noremap <CR> o<ESC>
noremap <S-CR> O<ESC>


" Opens an edit command with the current path
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
